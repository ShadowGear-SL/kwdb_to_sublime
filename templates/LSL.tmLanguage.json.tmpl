/*
NOTE:   Following definitions are taken from kwdb (https://bitbucket.org/Sei_Lisa/kwdb).
        Should you have any question about the avoid/event/function/constant
        definitions, please check with the kwdb project and contact the kwdb
        maintainer first. If kwdb have updated their database version and mine is
        still old, please let me know.

Generated by LSL2 Derived Files Generator. Database version: [@--$version--@]
*/

{
  "fileTypes": [
    "lsl"
  ],
  "name": "LSL",
  "patterns": [
    {
      "include": "#value"
    }
  ],
  "repository": {
    "array": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.array.begin.lsl"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.array.end.lsl"
        }
      },
      "name": "meta.inarray.lsl",
      "patterns": [
        {
          "include": "#infunc"
        }
      ]
    },
    "avoid": {
      "match": "\\b[@--$invalids--@]\\b",
      "name": "invalid.deprecated.lsl"
    },
    "begin_end": {
      "begin": "\\{",
      "end": "\\}",
      "name": "meta.incode.lsl",
      "patterns": [
        {
          "include": "#infunc"
        }
      ]
    },
    "commentblock": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.lsl"
    },
    "commentline": {
      "match": "(//).*$\\n?",
      "name": "comment.line.double-slash.lsl"
    },
    "constant": {
      "patterns": [
        {
          "match": "\\b(default|state)\\b",
          "name": "constant.language.state.lsl"
        },
        {
          "match": "\\b(TRUE|FALSE)\\b",
          "name": "constant.language.integer.lsl"
        },
        {
          "match": "\\b(NULL_KEY|EOF)\\b",
          "name": "constant.language.string.lsl"
        }
      ]
    },
    "event": {
      "begin": "^\\s*[@--$valid_events--@]\\b",
      "beginCaptures": {
        "0": {
          "name": "support.function.event.lsl"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.event.end.lsl"
        }
      },
      "name": "meta.event.lsl",
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "meta.event.parameters.lsl",
          "patterns": [
            {
              "include": "#inparam"
            }
          ]
        },
        {
          "begin": "{",
          "end": "(?=})",
          "name": "meta.event.body.lsl",
          "patterns": [
            {
              "include": "#infunc"
            }
          ]
        },
        {
          "include": "#commentblock"
        },
        {
          "include": "#commentline"
        }
      ]
    },
    "flow_control": {
      "match": "\\b(jump|return|if|else|for|do|while|@)\\b",
      "name": "keyword.control.flow.lsl"
    },
    "functiondef": {
      "begin": "(?:\\w+\\s+)?(\\w+)?\\s*(?=\\(.*?)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.function.begin.lsl"
        },
        "1": {
          "name": "entity.name.function.lsl"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.function.end.lsl"
        }
      },
      "name": "meta.function.lsl",
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "meta.function.parameters.lsl",
          "patterns": [
            {
              "include": "#inparam"
            }
          ]
        },
        {
          "begin": "{",
          "end": "(?=})",
          "name": "meta.function.body.lsl",
          "patterns": [
            {
              "include": "#infunc"
            }
          ]
        },
        {
          "include": "#commentblock"
        },
        {
          "include": "#commentline"
        }
      ]
    },
    "inparam": {
      "patterns": [
        {
          "include": "#storage_type"
        },
        {
          "include": "#commentblock"
        },
        {
          "include": "#commentline"
        }
      ]
    },
    "infunc": {
      "patterns": [
        {
          "include": "#begin_end"
        },
        {
          "include": "#commentblock"
        },
        {
          "include": "#commentline"
        },
        {
          "include": "#array"
        },
        {
          "include": "#quoted"
        },
        {
          "include": "#flow_control"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#storage_type"
        },
        {
          "include": "#llconstant"
        },
        {
          "include": "#avoid"
        },
        {
          "include": "#reserved"
        },
        {
          "include": "#llfunction"
        },
        {
          "include": "#number"
        },
        {
          "include": "#operator"
        }
      ]
    },
    "llconstant": {
      "patterns": [
        {
          "match": "\\b[@--$valid_constants_integer--@]\\b",
          "name": "constant.language.ll.integer.lsl"
        },
        {
          "match": "\\b[@--$valid_constants_string--@]\\b",
          "name": "constant.language.ll.string.lsl"
        },
        {
          "match": "\\b[@--$valid_constants_float--@]\\b",
          "name": "constant.language.ll.float.lsl"
        },
        {
          "match": "\\b[@--$valid_constants_compound--@]\\b",
          "name": "constant.language.ll.compound.lsl"
        }
      ]
    },
    "llfunction": {
      "match": "\\b[@--$valid_functions--@]\\b",
      "name": "support.function.ll.lsl"
    },
    "number": {
      "name": "constant.numeric.lsl",
      "patterns": [
        {
          "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])",
          "name": "constant.numeric.float.lsl"
        },
        {
          "match": "(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))",
          "name": "constant.numeric.float.lsl"
        },
        {
          "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))",
          "name": "constant.numeric.float.lsl"
        },
        {
          "match": "\\b(?i:(0x\\h*))",
          "name": "constant.numeric.integer.hexadecimal.lsl"
        },
        {
          "match": "\\b(0[0-7]+)",
          "name": "constant.numeric.integer.octal.lsl"
        },
        {
          "match": "\\b([1-9]+[0-9]*|0)",
          "name": "constant.numeric.integer.decimal.lsl"
        }
      ]
    },
    "operator": {
      "match": "[\\=\\+\\-%&<>^|\\*!~]",
      "name": "keyword.operator.lsl"
    },
    "quoted": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.lsl"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.lsl"
        }
      },
      "name": "string.quoted.double.lsl",
      "patterns": [
        {
          "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
          "name": "constant.character.escape.lsl"
        }
      ]
    },
    "reserved": {
      "match": "\\b(event|print)\\b",
      "name": "variable.language.lsl"
    },
    "state": {
      "begin": "^\\s*((?:state)\\s+\\w+|default)\\b",
      "beginCaptures": {
        "0": {
          "name": "entity.name.class.state.begin.lsl"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.state.end.lsl"
        }
      },
      "name": "meta.state.lsl",
      "patterns": [
        {
          "begin": "{",
          "end": "(?=})",
          "name": "meta.state.body.lsl",
          "patterns": [
            {
              "include": "#commentblock"
            },
            {
              "include": "#commentline"
            },
            {
              "include": "#event"
            }
          ]
        },
        {
          "include": "#commentblock"
        },
        {
          "include": "#commentline"
        }
      ]
    },
    "storage_type": {
      "match": "\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b",
      "name": "storage.type.lsl"
    },
    "value": {
      "patterns": [
        {
          "include": "#commentblock"
        },
        {
          "include": "#commentline"
        },
        {
          "include": "#state"
        },
        {
          "include": "#storage_type"
        },
        {
          "include": "#quoted"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#reserved"
        },
        {
          "include": "#number"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#array"
        },
        {
          "include": "#functiondef"
        }
      ]
    }
  },
  "scopeName": "source.lsl",
  "uuid": "9b597cba-0612-4f3d-8e02-edaa14abdc95"
}
